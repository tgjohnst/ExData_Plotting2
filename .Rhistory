# ## cacheSolve computes the inverse of the special "matrix" returned by makeCacheMatrix.
# ## If the inverse has already been calculated (and the matrix has not changed),
# ## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x=matrix(),...){ #function takes matrix as input
if(!is.null(m)){ #check to see if existing m is null; if not...
message("getting cached data") #throw message saying "getting cached data"
print(m) # print cached inverse
}
else{ #if existing m is indeed null...
m<<-solve(x)    #solve the matrix and put the resulting inverse in a variable named m
print(m)       #print new inverse
}
}
mat <- makeCacheMatrix(matrix(c(2,3,4,5), nrow = 2))
cacheSolve(mat)
mat
m
x
## These functions cache the inverse of a matrix and return it, either by
## calculating it or retreiving a previously calculated matrix from cache.
## This function creates a list of functions that set the matrix, get the matrix,
## set the inverse of the matrix and get the inverse of the matrix.
makeCacheMatrix <- function(x = matrix()) {
v <- NULL
set <- function(y) {
x <<- y
v <<- NULL
}
get <- function() x
setinverse <- function(inverse) v <<- inverse
getinverse <- function() v
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function calculates the inverse of the matrix created using the above function.
cacheSolve <- function(x, ...) {
v <- x$getinverse()
if(!is.null(v)) {
message("getting cached data")
return(v)
}
data <- x$get()
v <- solve(data, ...)
x$setinverse(v)
v
}
mat
cacheSolve(mat)
v
makeCacheMatrix <- function(x = matrix()){ #function takes matrix as input
m <- NULL #setting inverse variable to null
#assign("m", NULL, envir= .GlobalEnv)
set <- function(y) { #naming and assigning subfunction;
x <<- y #turns new input into live input
m <<- NULL #resets m to null, one level up (parent environment)
}
get <- function() x # naming and assigning subfunction: retrieves current data matrix
setMatrix <- function(x) {  # naming and assigning subfunction: takes current data matrix and calculates its inverse
m <-solve(x) # assigns name m to inverse
}
getMatrix <- function() m  #naming and assigning subfunction: retrieves inverse
list(set=set, get=get, setMatrix=setMatrix, #list items (names of subfunctions) for function
getMatrix=getMatrix)
}
#A<-makeCacheMatrix() #instantiate MCM function
#m<<-A$setMatrix(x) # subfunction (with this instantiation) - generates inverse and assigns it to variable
# ## cacheSolve computes the inverse of the special "matrix" returned by makeCacheMatrix.
# ## If the inverse has already been calculated (and the matrix has not changed),
# ## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x=matrix(),...){ #function takes matrix as input
if(!is.null(m)){ #check to see if existing m is null; if not...
message("getting cached data") #throw message saying "getting cached data"
print(m) # print cached inverse
}
else{ #if existing m is indeed null...
m<<-solve(x)    #solve the matrix and put the resulting inverse in a variable named m
print(m)       #print new inverse
}
}
mat <- makeCacheMatrix(x = matrix(c(3,4,5,6), nrow=2))
cacheSolve(mat)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL			# stores the inverted matrix
# get/set
get <- function() x
set <- function(y) {
x <<- y
inv <<- NULL
}
# get/set for inversion
getInverse <- function() inv
setInverse <- function(solve) inv <<- solve
# return the 'CacheMatrix'
return(list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse))
}
##########################
# This function calculates the inverted form of a supplied CacheMatrix in a cache-aware
# manner. If the inverse is not cached, cacheSolve will calculate and store it. If
# the inverse is cached, cacheSolve will also notify the user that it is returning
# a cached value.
cacheSolve <- function(x, ...) {
inv <- x$getInverse()
# Use cached inversion if there
if(!is.null(inv)) {
message("Using cached inverted matrix")
return(inv)
}
# Otherwise, calculate it and store as inv
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
return(inv)
}
mat <- makeCacheMatrix(x = matrix(c(3,4,5,6), nrow=2))
cacheSolve(mat)
cacheSolve(mat)
xyplot()
library(lattice)
xyplot()
?xyplot
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
panel.abline(h=3)
panel.abline(h=300)
lines(300)
?panel.abline
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
?trellis.par.set()
?splom
?print.trellis()
?par
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
g
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
## plot1.R
## Analysis script for the second project of Coursera Data Science Series,
## Course 4: Exploratory Data Analysis (exdata-014)
## Timothy Johnstone, May 2015
# Set working directory
# TO RUN THIS SCRIPT please modify the path to reflect your system's file structure
setwd("Z:/Lotus/Dropbox/Coursera/4_Exploratory_Data_Analysis/Projects/ExData_Plotting2")
# You must have the ggplot2 library installed to run this script
library(ggplot2)
##########
# Load in dataset files
nei <- readRDS("exdata_data_NEI_data/summarySCC_PM25.rds")
scc <- readRDS("exdata_data_NEI_data/Source_Classification_Code.rds")
##########
# Get just baltimore emissions
nei_Baltimore <- nei[nei$fips=="24510",]
# Calculate total emissions for each year & type in Baltimore
totalEmissions_Baltimore <- aggregate(Emissions ~ type+year, nei_Baltimore,sum)
# Calculate max and min per type for hlines
firstPerType <- data.frame(z=totalEmissions_Baltimore$Emissions[1:4],type=totalEmissions_Baltimore$type[1:4])
lastPerType <- data.frame(z=totalEmissions_Baltimore$Emissions[13:16],type=totalEmissions_Baltimore$type[13:16])
# Create output device and plot
png("plots/plot3.png",600,600)
ggp <- ggplot(totalEmissions_Baltimore, aes(year,Emissions,fill=type)) +
geom_line() + geom_point() +
geom_hline(data=firstPerType, aes(yintercept = z), lty=2, col='red') +
geom_hline(data=lastPerType, aes(yintercept = z),lty=2, col='green') +
theme_bw() + guides(fill=FALSE)+
facet_grid(.~type,scales = "free",space="free") +
labs(title=expression("PM"[2.5]*" emissions in Baltimore MD (24510) for each source type by year")) +
labs(x="year", y=expression("Total PM"[2.5]*" emissions (tons)"))
print(ggp)
dev.off()
View(nei)
View(scc)
View(scc)
scc_comb <- grepl("comb", scc$SCC.Level.One, ignore.case=TRUE)
scc_coal <- grepl("coal", scc$SCC.Level.Four, ignore.case=TRUE)
head(scc_comb)
plot(
nei_coalCombustion$year, nei_coalCombustion$Emissions/1000, type='l',
main="Total PM2.5 emissions from coal combustion sources, by year",
xlab="Year",
ylim=c(0,4), ylab="PM2.5 Emissions (thousands of tons)",
)
points(nei_coalCombustion$year, nei_coalCombustion$Emissions/1000,pch=19)
# Add lines indicating the starting and ending value
abline(h=nei_coalCombustion$Emissions[1]/1000, lty=2, col='red')
abline(h=nei_coalCombustion$Emissions[4]/1000, lty=2, col='green')
# Take only the subset of data related to coal combustion
# Find coal and combustion related scc codes
scc_comb <- grepl("comb", scc$SCC.Level.One, ignore.case=TRUE)
scc_coal <- grepl("coal", scc$SCC.Level.Four, ignore.case=TRUE)
scc_coalCombustion <- scc[(scc_comb & scc_coal),]$SCC
# Subset nei by scc codes
nei_coalCombustion <- nei[nei$SCC %in% scc_coalCombustion,]
##########
# Set up output device and plot
#png("plots/plot2.png",600,600)
plot(
nei_coalCombustion$year, nei_coalCombustion$Emissions/1000, type='l',
main="Total PM2.5 emissions from coal combustion sources, by year",
xlab="Year",
ylim=c(0,4), ylab="PM2.5 Emissions (thousands of tons)",
)
points(nei_coalCombustion$year, nei_coalCombustion$Emissions/1000,pch=19)
# Add lines indicating the starting and ending value
abline(h=nei_coalCombustion$Emissions[1]/1000, lty=2, col='red')
abline(h=nei_coalCombustion$Emissions[4]/1000, lty=2, col='green')
#dev.off()
# Calculate total per year
nei_coalCombustion <- aggregate(Emissions ~ year, nei_coalCombustion,sum)
##########
# Set up output device and plot
#png("plots/plot2.png",600,600)
plot(
nei_coalCombustion$year, nei_coalCombustion$Emissions/1000, type='l',
main="Total PM2.5 emissions from coal combustion sources, by year",
xlab="Year",
ylim=c(0,4), ylab="PM2.5 Emissions (thousands of tons)",
)
points(nei_coalCombustion$year, nei_coalCombustion$Emissions/1000,pch=19)
# Add lines indicating the starting and ending value
abline(h=nei_coalCombustion$Emissions[1]/1000, lty=2, col='red')
abline(h=nei_coalCombustion$Emissions[4]/1000, lty=2, col='green')
#dev.off()
# Subset nei by scc codes
nei_coalCombustion <- nei[nei$SCC %in% scc_coalCombustion,]
nei_coalCombustion <- aggregate(Emissions ~ year, nei_coalCombustion,sum)
plot(
nei_coalCombustion$year, nei_coalCombustion$Emissions/1000000, type='l',
main="Total PM2.5 emissions from coal combustion sources, by year",
xlab="Year",
ylim=c(0,1), ylab="PM2.5 Emissions (millions of tons)",
)
points(nei_coalCombustion$year, nei_coalCombustion$Emissions/1000000,pch=19)
# Add lines indicating the starting and ending value
abline(h=nei_coalCombustion$Emissions[1]/1000000, lty=2, col='red')
abline(h=nei_coalCombustion$Emissions[4]/1000000, lty=2, col='green')
plot(
nei_coalCombustion$year, nei_coalCombustion$Emissions/1000000, type='l',
main="Total PM2.5 emissions from coal combustion sources, by year",
xlab="Year",
ylim=c(0,0.6), ylab="PM2.5 Emissions (millions of tons)",
)
points(nei_coalCombustion$year, nei_coalCombustion$Emissions/1000000,pch=19)
# Add lines indicating the starting and ending value
abline(h=nei_coalCombustion$Emissions[1]/1000000, lty=2, col='red')
abline(h=nei_coalCombustion$Emissions[4]/1000000, lty=2, col='green')
# Set up output device and plot
png("plots/plot4.png",600,600)
plot(
nei_coalCombustion$year, nei_coalCombustion$Emissions/1000000, type='l',
main="Total PM2.5 emissions from coal combustion sources, by year",
xlab="Year",
ylim=c(0,0.6), ylab="PM2.5 Emissions (millions of tons)",
)
points(nei_coalCombustion$year, nei_coalCombustion$Emissions/1000000,pch=19)
# Add lines indicating the starting and ending value
abline(h=nei_coalCombustion$Emissions[1]/1000000, lty=2, col='red')
abline(h=nei_coalCombustion$Emissions[4]/1000000, lty=2, col='green')
dev.off()
# Take only the subset of data related to motor vehicles in Baltimore
vehicles <- grepl("vehicle", SCC$SCC.Level.Two, ignore.case=TRUE)
scc_vehicles <- scc[vehicles,]$SCC
nei_vehicles <- nei[(nei$SCC %in% scc_vehicles) & (nei$fips == 24510),]
# Calculate total per year
nei_vehiclesTotal <- aggregate(Emissions ~ year, nei_vehicles,sum)
# Take only the subset of data related to motor vehicles in Baltimore
vehicles <- grepl("vehicle", scc$SCC.Level.Two, ignore.case=TRUE)
scc_vehicles <- scc[vehicles,]$SCC
nei_vehicles <- nei[(nei$SCC %in% scc_vehicles) & (nei$fips == 24510),]
# Calculate total per year
nei_vehiclesTotal <- aggregate(Emissions ~ year, nei_vehicles,sum)
plot(
nei_vehiclesTotal$year, nei_vehiclesTotal$Emissions/1000000, type='l',
main="Total PM2.5 emissions from coal combustion sources, by year",
xlab="Year",
ylim=c(0,0.6), ylab="PM2.5 Emissions (millions of tons)",
)
points(nei_vehiclesTotal$year, nei_vehiclesTotal$Emissions/1000000,pch=19)
# Add lines indicating the starting and ending value
abline(h=nei_vehiclesTotal$Emissions[1]/1000000, lty=2, col='red')
abline(h=nei_vehiclesTotal$Emissions[4]/1000000, lty=2, col='green')
plot(
nei_vehiclesTotal$year, nei_vehiclesTotal$Emissions/1000, type='l',
main="Total PM2.5 emissions from coal combustion sources, by year",
xlab="Year",
ylim=c(0,0.6), ylab="PM2.5 Emissions (millions of tons)",
)
points(nei_vehiclesTotal$year, nei_vehiclesTotal$Emissions/1000,pch=19)
# Add lines indicating the starting and ending value
abline(h=nei_vehiclesTotal$Emissions[1]/1000, lty=2, col='red')
abline(h=nei_vehiclesTotal$Emissions[4]/1000, lty=2, col='green')
# Set up output device and plot
png("plots/plot4.png",600,600)
plot(
nei_coalCombustion$year, nei_coalCombustion$Emissions/1000000, type='l',
main="Total PM2.5 emissions from coal combustion sources, by year",
xlab="Year",
ylim=c(0,0.6), ylab="PM2.5 Emissions (megatons)",
)
points(nei_coalCombustion$year, nei_coalCombustion$Emissions/1000000,pch=19)
# Add lines indicating the starting and ending value
abline(h=nei_coalCombustion$Emissions[1]/1000000, lty=2, col='red')
abline(h=nei_coalCombustion$Emissions[4]/1000000, lty=2, col='green')
dev.off()
# Get just baltimore emissions
nei_Baltimore <- nei[nei$fips=="24510",]
# Calculate total emissions for each year in Baltimore
totalEmissions_Baltimore <- aggregate(Emissions ~ year, nei_Baltimore,sum)
# Set up output device and plot
png("plots/plot2.png",600,600)
plot(
totalEmissions_Baltimore$year, totalEmissions_Baltimore$Emissions/1000, type='l',
main="Total PM2.5 emissions in Baltimore MD (24510) by year",
xlab="Year",
ylim=c(0,4), ylab="PM2.5 Emissions (kilotons)",
)
points(totalEmissions_Baltimore$year, totalEmissions_Baltimore$Emissions/1000,pch=19)
# Add lines indicating the starting and ending value
abline(h=totalEmissions_Baltimore$Emissions[1]/1000, lty=2, col='red')
abline(h=totalEmissions_Baltimore$Emissions[4]/1000, lty=2, col='green')
dev.off()
# Calculate total emissions for each year
totalEmissions <- aggregate(Emissions ~ year, nei, sum)
# Set up output device and plot
png("plots/plot1.png",600,600)
plot(
totalEmissions$year, totalEmissions$Emissions/1000000, type='l',
main="Total PM2.5 emissions from US sources by year",
xlab="Year",
ylim=c(0,8), ylab="PM2.5 emissions (megatons)",
)
points(totalEmissions$year, totalEmissions$Emissions/1000000,pch=19)
#add lines indicating the starting and ending value
abline(h=totalEmissions$Emissions[1]/1000000, lty=2, col='red')
abline(h=totalEmissions$Emissions[4]/1000000, lty=2, col='green')
dev.off()
# Set up output device and plot
png("plots/plot5.png",600,600)
plot(
nei_vehiclesTotal$year, nei_vehiclesTotal$Emissions/1000, type='l',
main="Total PM2.5 emissions from coal combustion sources, by year",
xlab="Year",
ylim=c(0,0.6), ylab="PM2.5 Emissions (kilotons)",
)
points(nei_vehiclesTotal$year, nei_vehiclesTotal$Emissions/1000,pch=19)
# Add lines indicating the starting and ending value
abline(h=nei_vehiclesTotal$Emissions[1]/1000, lty=2, col='red')
abline(h=nei_vehiclesTotal$Emissions[4]/1000, lty=2, col='green')
dev.off()
vehicles <- grepl("vehicle", scc$SCC.Level.Two, ignore.case=TRUE)
scc_vehicles <- scc[vehicles,]$SCC
nei_la_vehicles <- nei[(nei$SCC %in% scc_vehicles) & (nei$fips == 24510),]
nei_balt_vehicles <- nei[(nei$SCC %in% scc_vehicles) & (nei$fips == 06037),]
# Calculate total per year
nei_la_vehiclesTotal <- aggregate(Emissions ~ year, nei_la_vehicles,sum)
nei_balt_vehiclesTotal <- aggregate(Emissions ~ year, nei_balt_vehicles,sum)
scc_vehicles <- scc[vehicles,]$SCC
nei_la_vehicles <- nei[(nei$SCC %in% scc_vehicles) & (nei$fips == 06037),]
nei_balt_vehicles <- nei[(nei$SCC %in% scc_vehicles) & (nei$fips == 24510),]
head(nei$fips)
head(levels(nei$fips))
nei_la_vehicles <- nei[(nei$SCC %in% scc_vehicles) & (nei$fips == '06037'),]
nei_balt_vehicles <- nei[(nei$SCC %in% scc_vehicles) & (nei$fips == '24510''),]
nei_balt_vehicles <- nei[(nei$SCC %in% scc_vehicles) & (nei$fips == '24510'),]
nei_vehicles <- nei[(nei$SCC %in% scc_vehicles) & (nei$fips %in% c('24510','06037'),]
# Calculate total per year
nei_vehiclesTotal <- aggregate(Emissions ~ fips+year, nei_vehicles,sum)
nei_vehicles <- nei[(nei$SCC %in% scc_vehicles) & (nei$fips %in% c('24510','06037')),]
# Calculate total per year
nei_vehiclesTotal <- aggregate(Emissions ~ fips+year, nei_vehicles,sum)
scc_vehicles <- scc[vehicles,]$SCC
nei_vehicles <- nei[(nei$SCC %in% scc_vehicles) & (nei$fips == 24510),]
# Calculate total per year
nei_vehiclesTotal <- aggregate(Emissions ~ year, nei_vehicles,sum)
##########
# Set up output device and plot
png("plots/plot5.png",600,600)
plot(
nei_vehiclesTotal$year, nei_vehiclesTotal$Emissions/1000, type='l',
main="Total PM2.5 emissions from Baltimore MD motor vehicles, by year",
xlab="Year",
ylim=c(0,0.6), ylab="PM2.5 Emissions (kilotons)",
)
points(nei_vehiclesTotal$year, nei_vehiclesTotal$Emissions/1000,pch=19)
# Add lines indicating the starting and ending value
abline(h=nei_vehiclesTotal$Emissions[1]/1000, lty=2, col='red')
abline(h=nei_vehiclesTotal$Emissions[4]/1000, lty=2, col='green')
dev.off()
nei_vehicles <- nei[(nei$SCC %in% scc_vehicles),]
# Calculate total per year
nei_vehiclesTotal <- aggregate(Emissions ~ fips+year, nei_vehicles,sum)
##########
# Make a function to plot any given city/fips to avoid repeating code later
plotCity <- function(city,fips) {
nei_city <- nei_vehiclesTotal[nei_vehiclesTotal$fips==fips,]
plot(
nei_city$year, nei_city$Emissions/1000, type='l',
main=paste0("Total PM2.5 emissions from vehicles in ", city, ", by year"),
xlab="Year",
ylim=c(0,0.6), ylab="PM2.5 Emissions (kilotons)",
)
points(nei_city$year, nei_city$Emissions/1000,pch=19)
# Add lines indicating the starting and ending value
abline(h=nei_city$Emissions[1]/1000, lty=2, col='red')
abline(h=nei_city$Emissions[4]/1000, lty=2, col='green')
}
plotCity <- function(city,fips) {
nei_city <- nei_vehiclesTotal[nei_vehiclesTotal$fips==fips,]
plot(
nei_city$year, nei_city$Emissions/1000, type='l',
main=paste0("Total PM2.5 emissions from vehicles in ", city, ", by year"),
xlab="Year",
ylim=c(0,0.6), ylab="PM2.5 Emissions (kilotons)",
)
points(nei_city$year, nei_city$Emissions/1000,pch=19)
# Add lines indicating the starting and ending value
abline(h=nei_city$Emissions[1]/1000, lty=2, col='red')
abline(h=nei_city$Emissions[4]/1000, lty=2, col='green')
return()
}
par(mfrow=c(1,2))
plotCity('Baltimore','24510')
plotCity('LA','06037')
plotCity <- function(city,fips) {
nei_city <- nei_vehiclesTotal[nei_vehiclesTotal$fips==fips,]
plot(
nei_city$year, nei_city$Emissions/1000, type='l',
main=paste0("Total PM2.5 emissions from vehicles in ", city, ", by year"),
xlab="Year",
ylim=c(0,0.6), ylab="PM2.5 Emissions (kilotons)",
)
points(nei_city$year, nei_city$Emissions/1000,pch=19)
# Add lines indicating the starting and ending value
abline(h=nei_city$Emissions[1]/1000, lty=2, col='red')
abline(h=nei_city$Emissions[4]/1000, lty=2, col='green')
}
par(mfrow=c(1,2))
plotCity('Baltimore','24510')
plotCity('LA','06037')
plotCity <- function(city,fips) {
nei_city <- nei_vehiclesTotal[nei_vehiclesTotal$fips==fips,]
plot(
nei_city$year, nei_city$Emissions/1000, type='l',
main=paste0("Total PM2.5 emissions from vehicles in ", city, ", by year"),
xlab="Year",
ylab="PM2.5 Emissions (kilotons)",
)
points(nei_city$year, nei_city$Emissions/1000,pch=19)
# Add lines indicating the starting and ending value
abline(h=nei_city$Emissions[1]/1000, lty=2, col='red')
abline(h=nei_city$Emissions[4]/1000, lty=2, col='green')
}
par(mfrow=c(1,2))
plotCity('Baltimore','24510')
plotCity('LA','06037')
plotCity <- function(city,fips) {
nei_city <- nei_vehiclesTotal[nei_vehiclesTotal$fips==fips,]
plot(
nei_city$year, nei_city$Emissions/1000, type='l',
main=paste0("Total PM2.5 emissions from vehicles in ", city, ", by year"),
xlab="Year",
ylab="PM2.5 Emissions (kilotons)", ylim=c(0,8)
)
points(nei_city$year, nei_city$Emissions/1000,pch=19)
# Add lines indicating the starting and ending value
abline(h=nei_city$Emissions[1]/1000, lty=2, col='red')
abline(h=nei_city$Emissions[4]/1000, lty=2, col='green')
}
par(mfrow=c(1,2))
plotCity('Baltimore','24510')
plotCity('LA','06037')
plotCity <- function(city,fips) {
nei_city <- nei_vehiclesTotal[nei_vehiclesTotal$fips==fips,]
plot(
nei_city$year, nei_city$Emissions/1000, type='l',
main=paste0("Total PM2.5 emissions from vehicles in ", city, ", by year"), cex.main=0.6,
xlab="Year",
ylab="PM2.5 Emissions (kilotons)", ylim=c(0,8)
)
points(nei_city$year, nei_city$Emissions/1000,pch=19)
# Add lines indicating the starting and ending value
abline(h=nei_city$Emissions[1]/1000, lty=2, col='red')
abline(h=nei_city$Emissions[4]/1000, lty=2, col='green')
}
par(mfrow=c(1,2))
plotCity('Baltimore','24510')
plotCity('LA','06037')
png("plots/plot6.png",600,600)
par(mfrow=c(1,2))
plotCity('Baltimore','24510')
plotCity('LA','06037')
dev.off()
